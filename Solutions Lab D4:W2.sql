USE sakila;

-- 1.List the number of films per category.
select c.name as category, count(c.name) as number_of_films
from sakila.film_category as f
join sakila.category as c
on f.category_id = c.category_id
group by c.name;
-- 2.Retrieve the store ID, city, and country for each store.
select s.store_id, c.city, co.country
from sakila.store as s
join sakila.address as a
on s.address_id = a.address_id
join sakila.city as c
on a.city_id = c.city_id
join sakila.country as co
on c.country_id = co.country_id;

-- 3.Calculate the total revenue generated by each store in dollars.
select s.store_id, sum(p.amount) as Total_Revenue
from payment as p
join staff as s on p.staff_id = s.staff_id
join store st on s.store_id = st.store_id
group by st.store_id;
-- 4.Determine the average running time of films for each category.
select c.name as Category, avg(f.length) as Average_Running_Time
from category as c 
join film_category as fc 
on c.category_id = fc.category_id
join film as f 
on fc.film_id = f.film_id
group by c.name;
-- 5.Identify the film categories with the longest average running time.
select c.name as Category, avg(f.length) as Average_Running_Time
from category as c 
join film_category as fc 
on c.category_id = fc.category_id
join film as f on fc.film_id = f.film_id
group by c.name
order by avg(f.length) desc
limit 1;
-- 6.Display the top 10 most frequently rented movies in descending order.
select f.title, count(r.rental_id) as Number_of_Rentals
from film as f
join inventory as i 
on f.film_id = i.film_id
join rental as r 
on i.inventory_id = r.inventory_id
group by f.title
order by count(r.rental_id) desc
limit 10;
-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.
select f.title, s.store_id
from film as f
join inventory as i 
on f.film_id = i.film_id
join store as s 
on i.store_id = s.store_id
where f.title = 'Academy Dinosaur' and s.store_id = 1;